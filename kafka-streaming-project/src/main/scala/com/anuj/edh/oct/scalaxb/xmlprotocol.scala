// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.anuj.edh.oct.scalaxb

import com.anuj.edh.oct

import scala.concurrent.{ExecutionContext, Future}


/**
usage:
val obj = scalaxb.fromXML[com.etihad.edh.oct.scalaxb.Foo](node)
val document = scalaxb.toXML[com.etihad.edh.oct.scalaxb.Foo](obj, "foo", com.etihad.edh.oct.scalaxb.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://iflight.ibsplc.com/",
    Some("ift") -> "http://iflight.ibsplc.com/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Cometihadedhoctscalaxb_AircraftGeneralTypesFormat: scalaxb.XMLFormat[AircraftGeneralTypes] = new DefaultCometihadedhoctscalaxb_AircraftGeneralTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_AircraftActionTypesFormat: scalaxb.XMLFormat[AircraftActionTypes] = new DefaultCometihadedhoctscalaxb_AircraftActionTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_AircraftAssignmentTypesFormat: scalaxb.XMLFormat[AircraftAssignmentTypes] = new DefaultCometihadedhoctscalaxb_AircraftAssignmentTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightGeneralTypesFormat: scalaxb.XMLFormat[FlightGeneralTypes] = new DefaultCometihadedhoctscalaxb_FlightGeneralTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightFormat: scalaxb.XMLFormat[Flight] = new DefaultCometihadedhoctscalaxb_FlightFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightIdFormat: scalaxb.XMLFormat[FlightId] = new DefaultCometihadedhoctscalaxb_FlightIdFormat {}
  implicit lazy val Cometihadedhoctscalaxb_MultiLegReqFlightIdFormat: scalaxb.XMLFormat[MultiLegReqFlightId] = new DefaultCometihadedhoctscalaxb_MultiLegReqFlightIdFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightIdAtcFormat: scalaxb.XMLFormat[FlightIdAtc] = new DefaultCometihadedhoctscalaxb_FlightIdAtcFormat {}
  implicit lazy val Cometihadedhoctscalaxb_CodeShareFlightIdFormat: scalaxb.XMLFormat[CodeShareFlightId] = new DefaultCometihadedhoctscalaxb_CodeShareFlightIdFormat {}
  implicit lazy val Cometihadedhoctscalaxb_AircraftInfoFormat: scalaxb.XMLFormat[AircraftInfo] = new DefaultCometihadedhoctscalaxb_AircraftInfoFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightInfoFormat: scalaxb.XMLFormat[FlightInfo] = new DefaultCometihadedhoctscalaxb_FlightInfoFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightStatusesFormat: scalaxb.XMLFormat[FlightStatuses] = new DefaultCometihadedhoctscalaxb_FlightStatusesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_SeatClassesFormat: scalaxb.XMLFormat[SeatClasses] = new DefaultCometihadedhoctscalaxb_SeatClassesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ConnectionDirectionTypesFormat: scalaxb.XMLFormat[ConnectionDirectionTypes] = new DefaultCometihadedhoctscalaxb_ConnectionDirectionTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_InboundOrOutboundTypesFormat: scalaxb.XMLFormat[InboundOrOutboundTypes] = new DefaultCometihadedhoctscalaxb_InboundOrOutboundTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ArrivalDepartureTypesFormat: scalaxb.XMLFormat[ArrivalDepartureTypes] = new DefaultCometihadedhoctscalaxb_ArrivalDepartureTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_DepartureOrArrivalTypesFormat: scalaxb.XMLFormat[DepartureOrArrivalTypes] = new DefaultCometihadedhoctscalaxb_DepartureOrArrivalTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_CargoWeightUnitsFormat: scalaxb.XMLFormat[CargoWeightUnits] = new DefaultCometihadedhoctscalaxb_CargoWeightUnitsFormat {}
  implicit lazy val Cometihadedhoctscalaxb_CargoVolumeUnitsFormat: scalaxb.XMLFormat[CargoVolumeUnits] = new DefaultCometihadedhoctscalaxb_CargoVolumeUnitsFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FuelOperationTypesFormat: scalaxb.XMLFormat[FuelOperationTypes] = new DefaultCometihadedhoctscalaxb_FuelOperationTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FuelFunctionTypesFormat: scalaxb.XMLFormat[FuelFunctionTypes] = new DefaultCometihadedhoctscalaxb_FuelFunctionTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FuelTotalizerTypesFormat: scalaxb.XMLFormat[FuelTotalizerTypes] = new DefaultCometihadedhoctscalaxb_FuelTotalizerTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FuelSuppliedElementTypesFormat: scalaxb.XMLFormat[FuelSuppliedElementTypes] = new DefaultCometihadedhoctscalaxb_FuelSuppliedElementTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FuelWeightUnitTypesFormat: scalaxb.XMLFormat[FuelWeightUnitTypes] = new DefaultCometihadedhoctscalaxb_FuelWeightUnitTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightTypesFormat: scalaxb.XMLFormat[FlightTypes] = new DefaultCometihadedhoctscalaxb_FlightTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_DomesticOrInternationalTypesFormat: scalaxb.XMLFormat[DomesticOrInternationalTypes] = new DefaultCometihadedhoctscalaxb_DomesticOrInternationalTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ForecastLoadFormat: scalaxb.XMLFormat[ForecastLoad] = new DefaultCometihadedhoctscalaxb_ForecastLoadFormat {}
  implicit lazy val Cometihadedhoctscalaxb_BookedLoadFormat: scalaxb.XMLFormat[BookedLoad] = new DefaultCometihadedhoctscalaxb_BookedLoadFormat {}
  implicit lazy val Cometihadedhoctscalaxb_CheckedLoadFormat: scalaxb.XMLFormat[CheckedLoad] = new DefaultCometihadedhoctscalaxb_CheckedLoadFormat {}
  implicit lazy val Cometihadedhoctscalaxb_BoardedLoadFormat: scalaxb.XMLFormat[BoardedLoad] = new DefaultCometihadedhoctscalaxb_BoardedLoadFormat {}
  implicit lazy val Cometihadedhoctscalaxb_PaxFormat: scalaxb.XMLFormat[Pax] = new DefaultCometihadedhoctscalaxb_PaxFormat {}
  implicit lazy val Cometihadedhoctscalaxb_LoadCountFormat: scalaxb.XMLFormat[LoadCount] = new DefaultCometihadedhoctscalaxb_LoadCountFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ComplementFormat: scalaxb.XMLFormat[Complement] = new DefaultCometihadedhoctscalaxb_ComplementFormat {}
  implicit lazy val Cometihadedhoctscalaxb_RankComplementsFormat: scalaxb.XMLFormat[RankComplements] = new DefaultCometihadedhoctscalaxb_RankComplementsFormat {}
  implicit lazy val Cometihadedhoctscalaxb_Complement2Format: scalaxb.XMLFormat[Complement2] = new DefaultCometihadedhoctscalaxb_Complement2Format {}
  implicit lazy val Cometihadedhoctscalaxb_QualificationComplementsFormat: scalaxb.XMLFormat[QualificationComplements] = new DefaultCometihadedhoctscalaxb_QualificationComplementsFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightLegComplementsFormat: scalaxb.XMLFormat[FlightLegComplements] = new DefaultCometihadedhoctscalaxb_FlightLegComplementsFormat {}
  implicit lazy val Cometihadedhoctscalaxb_BagCountFormat: scalaxb.XMLFormat[BagCount] = new DefaultCometihadedhoctscalaxb_BagCountFormat {}
  implicit lazy val Cometihadedhoctscalaxb_BaggageFormat: scalaxb.XMLFormat[Baggage] = new DefaultCometihadedhoctscalaxb_BaggageFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ConnectionFlightFormat: scalaxb.XMLFormat[ConnectionFlight] = new DefaultCometihadedhoctscalaxb_ConnectionFlightFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ConnectionsFormat: scalaxb.XMLFormat[Connections] = new DefaultCometihadedhoctscalaxb_ConnectionsFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FlightPaxFormat: scalaxb.XMLFormat[FlightPax] = new DefaultCometihadedhoctscalaxb_FlightPaxFormat {}
  implicit lazy val Cometihadedhoctscalaxb_GeneralTypesFormat: scalaxb.XMLFormat[GeneralTypes] = new DefaultCometihadedhoctscalaxb_GeneralTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_SpecialDutyCodesFormat: scalaxb.XMLFormat[SpecialDutyCodes] = new DefaultCometihadedhoctscalaxb_SpecialDutyCodesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_CrewTypesFormat: scalaxb.XMLFormat[CrewTypes] = new DefaultCometihadedhoctscalaxb_CrewTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_WeightTypeFormat: scalaxb.XMLFormat[WeightType] = new DefaultCometihadedhoctscalaxb_WeightTypeFormat {}
  implicit lazy val Cometihadedhoctscalaxb_UnitOfMeasuresFormat: scalaxb.XMLFormat[UnitOfMeasures] = new DefaultCometihadedhoctscalaxb_UnitOfMeasuresFormat {}
  implicit lazy val Cometihadedhoctscalaxb_WeightUnitTypesFormat: scalaxb.XMLFormat[WeightUnitTypes] = new DefaultCometihadedhoctscalaxb_WeightUnitTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_LengthTypeFormat: scalaxb.XMLFormat[LengthType] = new DefaultCometihadedhoctscalaxb_LengthTypeFormat {}
  implicit lazy val Cometihadedhoctscalaxb_VolumeTypeFormat: scalaxb.XMLFormat[VolumeType] = new DefaultCometihadedhoctscalaxb_VolumeTypeFormat {}
  implicit lazy val Cometihadedhoctscalaxb_VolumeUnitTypesFormat: scalaxb.XMLFormat[VolumeUnitTypes] = new DefaultCometihadedhoctscalaxb_VolumeUnitTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FleetFormat: scalaxb.XMLFormat[Fleet] = new DefaultCometihadedhoctscalaxb_FleetFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FleetTypesFormat: scalaxb.XMLFormat[FleetTypes] = new DefaultCometihadedhoctscalaxb_FleetTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_DaysOfWeekFormat: scalaxb.XMLFormat[DaysOfWeek] = new DefaultCometihadedhoctscalaxb_DaysOfWeekFormat {}
  implicit lazy val Cometihadedhoctscalaxb_PeriodTypesFormat: scalaxb.XMLFormat[PeriodTypes] = new DefaultCometihadedhoctscalaxb_PeriodTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_TimeModeTypesFormat: scalaxb.XMLFormat[TimeModeTypes] = new DefaultCometihadedhoctscalaxb_TimeModeTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_SubParameterFormat: scalaxb.XMLFormat[SubParameter] = new DefaultCometihadedhoctscalaxb_SubParameterFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ParameterFormat: scalaxb.XMLFormat[Parameter] = new DefaultCometihadedhoctscalaxb_ParameterFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ParametersFormat: scalaxb.XMLFormat[Parameters] = new DefaultCometihadedhoctscalaxb_ParametersFormat {}
  implicit lazy val Cometihadedhoctscalaxb_DurationOrPercentageFormat: scalaxb.XMLFormat[DurationOrPercentage] = new DefaultCometihadedhoctscalaxb_DurationOrPercentageFormat {}
  implicit lazy val Cometihadedhoctscalaxb_HaulTypesFormat: scalaxb.XMLFormat[HaulTypes] = new DefaultCometihadedhoctscalaxb_HaulTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_CrewApplicabilityFormat: scalaxb.XMLFormat[CrewApplicability] = new DefaultCometihadedhoctscalaxb_CrewApplicabilityFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FleetsFormat: scalaxb.XMLFormat[Fleets] = new DefaultCometihadedhoctscalaxb_FleetsFormat {}
  implicit lazy val Cometihadedhoctscalaxb_RanksFormat: scalaxb.XMLFormat[Ranks] = new DefaultCometihadedhoctscalaxb_RanksFormat {}
  implicit lazy val Cometihadedhoctscalaxb_BasesFormat: scalaxb.XMLFormat[Bases] = new DefaultCometihadedhoctscalaxb_BasesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_CrewApplicabilityMultiFormat: scalaxb.XMLFormat[CrewApplicabilityMulti] = new DefaultCometihadedhoctscalaxb_CrewApplicabilityMultiFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FromToTimeGroupSequenceFormat: scalaxb.XMLFormat[FromToTimeGroupSequence] = new DefaultCometihadedhoctscalaxb_FromToTimeGroupSequenceFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FromToDateTimeGroupSequenceFormat: scalaxb.XMLFormat[FromToDateTimeGroupSequence] = new DefaultCometihadedhoctscalaxb_FromToDateTimeGroupSequenceFormat {}
  implicit lazy val Cometihadedhoctscalaxb_StartEndDateTimeGroupSequenceFormat: scalaxb.XMLFormat[StartEndDateTimeGroupSequence] = new DefaultCometihadedhoctscalaxb_StartEndDateTimeGroupSequenceFormat {}
  implicit lazy val Cometihadedhoctscalaxb_FromToDateGroupSequenceFormat: scalaxb.XMLFormat[FromToDateGroupSequence] = new DefaultCometihadedhoctscalaxb_FromToDateGroupSequenceFormat {}
  implicit lazy val Cometihadedhoctscalaxb_MetaDataFormat: scalaxb.XMLFormat[MetaData] = new DefaultCometihadedhoctscalaxb_MetaDataFormat {}
  implicit lazy val Cometihadedhoctscalaxb_ActionTypesFormat: scalaxb.XMLFormat[ActionTypes] = new DefaultCometihadedhoctscalaxb_ActionTypesFormat {}
  implicit lazy val Cometihadedhoctscalaxb_MessageAttributesFormat: scalaxb.AttributeGroupFormat[MessageAttributes] = new DefaultCometihadedhoctscalaxb_MessageAttributesFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("aircraftGeneralTypes"), Some("http://iflight.ibsplc.com/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[AircraftGeneralTypes](elem)))
      case (Some("flightGeneralTypes"), Some("http://iflight.ibsplc.com/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[FlightGeneralTypes](elem)))
      case (Some("flightPax"), Some("http://iflight.ibsplc.com/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[FlightPax](elem)))
      case (Some("generalTypes"), Some("http://iflight.ibsplc.com/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[GeneralTypes](elem)))
      case (Some("metaData"), Some("http://iflight.ibsplc.com/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[MetaData](elem)))

      case _ => None
    }

  }

  trait DefaultCometihadedhoctscalaxb_AircraftGeneralTypesFormat extends scalaxb.XMLFormat[AircraftGeneralTypes] with scalaxb.CanWriteChildNodes[AircraftGeneralTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AircraftGeneralTypes] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.AircraftGeneralTypes(scala.collection.immutable.ListMap(List(
        (node \ "@schemaVersion").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Float](scala.xml.Text("2.0"), scalaxb.ElemName(node) :: stack))) map { "@schemaVersion" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: AircraftGeneralTypes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@schemaVersion", _) => if (__obj.schemaVersion.toString != "2.0") attr = scala.xml.Attribute(null, "schemaVersion", __obj.schemaVersion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: AircraftGeneralTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  def buildCometihadedhoctscalaxb_AircraftActionTypesFormat = new DefaultCometihadedhoctscalaxb_AircraftActionTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_AircraftActionTypesFormat extends scalaxb.XMLFormat[AircraftActionTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AircraftActionTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CANCEL")) => CANCEL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("END")) => ENDValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("START")) => STARTValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AircraftActionTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AircraftActionTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_AircraftAssignmentTypesFormat = new DefaultCometihadedhoctscalaxb_AircraftAssignmentTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_AircraftAssignmentTypesFormat extends scalaxb.XMLFormat[AircraftAssignmentTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): AircraftAssignmentTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AIRCRAFT")) => AIRCRAFT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ROTATION")) => ROTATION
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UNASSIGNED")) => UNASSIGNED

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, AircraftAssignmentTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: AircraftAssignmentTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_FlightGeneralTypesFormat extends scalaxb.XMLFormat[FlightGeneralTypes] with scalaxb.CanWriteChildNodes[FlightGeneralTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FlightGeneralTypes] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.FlightGeneralTypes(scala.collection.immutable.ListMap(List(
        (node \ "@schemaVersion").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Float](scala.xml.Text("2.0"), scalaxb.ElemName(node) :: stack))) map { "@schemaVersion" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: FlightGeneralTypes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@schemaVersion", _) => if (__obj.schemaVersion.toString != "2.0") attr = scala.xml.Attribute(null, "schemaVersion", __obj.schemaVersion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FlightGeneralTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultCometihadedhoctscalaxb_FlightFormat extends scalaxb.ElemNameParser[Flight] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("Flight")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Flight] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightId")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightInfo")) ^^
      { case p1 ~ p2 =>
      oct.scalaxb.Flight(scalaxb.fromXML[FlightId](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[FlightInfo](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Flight, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[FlightId](__obj.flightId, Some("http://iflight.ibsplc.com/"), Some("flightId"), __scope, false),
        __obj.flightInfo map { scalaxb.toXML[FlightInfo](_, Some("http://iflight.ibsplc.com/"), Some("flightInfo"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_FlightIdFormat extends scalaxb.ElemNameParser[FlightId] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("FlightId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FlightId] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightDate")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "carrierCode")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightSuffix")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "departureAirport")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "arrivalAirport")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "departureNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "legNumber")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      oct.scalaxb.FlightId(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: FlightId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.flightDate, Some("http://iflight.ibsplc.com/"), Some("flightDate"), __scope, false),
        scalaxb.toXML[String](__obj.carrierCode, Some("http://iflight.ibsplc.com/"), Some("carrierCode"), __scope, false),
        scalaxb.toXML[String](__obj.flightNumber, Some("http://iflight.ibsplc.com/"), Some("flightNumber"), __scope, false),
        __obj.flightSuffix map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("flightSuffix"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.departureAirport, Some("http://iflight.ibsplc.com/"), Some("departureAirport"), __scope, false),
        __obj.arrivalAirport map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("arrivalAirport"), __scope, false) } getOrElse {Nil},
        __obj.departureNumber map { scalaxb.toXML[Int](_, Some("http://iflight.ibsplc.com/"), Some("departureNumber"), __scope, false) } getOrElse {Nil},
        __obj.legNumber map { scalaxb.toXML[Int](_, Some("http://iflight.ibsplc.com/"), Some("legNumber"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_MultiLegReqFlightIdFormat extends scalaxb.ElemNameParser[MultiLegReqFlightId] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("MultiLegReqFlightId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[MultiLegReqFlightId] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightDate")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "carrierCode")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightSuffix")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "departureAirport")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "arrivalAirport")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "departureNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "legNumber")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      oct.scalaxb.MultiLegReqFlightId(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: MultiLegReqFlightId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.flightDate, Some("http://iflight.ibsplc.com/"), Some("flightDate"), __scope, false),
        scalaxb.toXML[String](__obj.carrierCode, Some("http://iflight.ibsplc.com/"), Some("carrierCode"), __scope, false),
        scalaxb.toXML[String](__obj.flightNumber, Some("http://iflight.ibsplc.com/"), Some("flightNumber"), __scope, false),
        __obj.flightSuffix map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("flightSuffix"), __scope, false) } getOrElse {Nil},
        __obj.departureAirport map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("departureAirport"), __scope, false) } getOrElse {Nil},
        __obj.arrivalAirport map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("arrivalAirport"), __scope, false) } getOrElse {Nil},
        __obj.departureNumber map { scalaxb.toXML[Int](_, Some("http://iflight.ibsplc.com/"), Some("departureNumber"), __scope, false) } getOrElse {Nil},
        __obj.legNumber map { scalaxb.toXML[Int](_, Some("http://iflight.ibsplc.com/"), Some("legNumber"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_FlightIdAtcFormat extends scalaxb.ElemNameParser[FlightIdAtc] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("FlightIdAtc")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FlightIdAtc] =
      phrase(opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightDateAtc")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "carrierCodeAtc")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightNumberAtc")) ^^
      { case p1 ~ p2 ~ p3 =>
      oct.scalaxb.FlightIdAtc(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: FlightIdAtc, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.flightDateAtc map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://iflight.ibsplc.com/"), Some("flightDateAtc"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.carrierCodeAtc, Some("http://iflight.ibsplc.com/"), Some("carrierCodeAtc"), __scope, false),
        scalaxb.toXML[String](__obj.flightNumberAtc, Some("http://iflight.ibsplc.com/"), Some("flightNumberAtc"), __scope, false))

  }

  trait DefaultCometihadedhoctscalaxb_CodeShareFlightIdFormat extends scalaxb.ElemNameParser[CodeShareFlightId] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("CodeShareFlightId")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CodeShareFlightId] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightDate")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "carrierCode")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightSuffix")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      oct.scalaxb.CodeShareFlightId(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CodeShareFlightId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.flightDate, Some("http://iflight.ibsplc.com/"), Some("flightDate"), __scope, false),
        scalaxb.toXML[String](__obj.carrierCode, Some("http://iflight.ibsplc.com/"), Some("carrierCode"), __scope, false),
        scalaxb.toXML[String](__obj.flightNumber, Some("http://iflight.ibsplc.com/"), Some("flightNumber"), __scope, false),
        __obj.flightSuffix map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("flightSuffix"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_AircraftInfoFormat extends scalaxb.ElemNameParser[AircraftInfo] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[AircraftInfo] =
      phrase(opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "aircraftSubType")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "aircraftVersion")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "aircraftRegistration")) ^^
      { case p1 ~ p2 ~ p3 =>
      oct.scalaxb.AircraftInfo(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: AircraftInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.aircraftSubType map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("aircraftSubType"), __scope, false) } getOrElse {Nil},
        __obj.aircraftVersion map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("aircraftVersion"), __scope, false) } getOrElse {Nil},
        __obj.aircraftRegistration map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("aircraftRegistration"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_FlightInfoFormat extends scalaxb.ElemNameParser[FlightInfo] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("FlightInfo")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FlightInfo] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "plannedDepartureDateTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "plannedArrivalDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "estimatedDepartureDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "estimatedArrivalDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "actualDepartureDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "actualArrivalDateTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "workType")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "serviceType")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "departureCountry")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "arrivalCountry")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "haulType")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fixedLinkInd")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "cloakedInd")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "aircraftInfo")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      oct.scalaxb.FlightInfo(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[HaulTypes](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[AircraftInfo](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: FlightInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.plannedDepartureDateTime, Some("http://iflight.ibsplc.com/"), Some("plannedDepartureDateTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.plannedArrivalDateTime, Some("http://iflight.ibsplc.com/"), Some("plannedArrivalDateTime"), __scope, false),
        __obj.estimatedDepartureDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://iflight.ibsplc.com/"), Some("estimatedDepartureDateTime"), __scope, false) } getOrElse {Nil},
        __obj.estimatedArrivalDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://iflight.ibsplc.com/"), Some("estimatedArrivalDateTime"), __scope, false) } getOrElse {Nil},
        __obj.actualDepartureDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://iflight.ibsplc.com/"), Some("actualDepartureDateTime"), __scope, false) } getOrElse {Nil},
        __obj.actualArrivalDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://iflight.ibsplc.com/"), Some("actualArrivalDateTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.workType, Some("http://iflight.ibsplc.com/"), Some("workType"), __scope, false),
        __obj.serviceType map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("serviceType"), __scope, false) } getOrElse {Nil},
        __obj.departureCountry map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("departureCountry"), __scope, false) } getOrElse {Nil},
        __obj.arrivalCountry map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("arrivalCountry"), __scope, false) } getOrElse {Nil},
        __obj.haulType map { scalaxb.toXML[HaulTypes](_, Some("http://iflight.ibsplc.com/"), Some("haulType"), __scope, false) } getOrElse {Nil},
        __obj.fixedLinkInd map { scalaxb.toXML[Boolean](_, Some("http://iflight.ibsplc.com/"), Some("fixedLinkInd"), __scope, false) } getOrElse {Nil},
        __obj.cloakedInd map { scalaxb.toXML[Boolean](_, Some("http://iflight.ibsplc.com/"), Some("cloakedInd"), __scope, false) } getOrElse {Nil},
        __obj.aircraftInfo map { scalaxb.toXML[AircraftInfo](_, Some("http://iflight.ibsplc.com/"), Some("aircraftInfo"), __scope, false) } getOrElse {Nil})

  }

  def buildCometihadedhoctscalaxb_FlightStatusesFormat = new DefaultCometihadedhoctscalaxb_FlightStatusesFormat {}
  trait DefaultCometihadedhoctscalaxb_FlightStatusesFormat extends scalaxb.XMLFormat[FlightStatuses] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FlightStatuses = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("PDEP")) => PDEP
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OFBL")) => OFBL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ENRT")) => ENRT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LAND")) => LAND
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ARVD")) => ARVD

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FlightStatuses] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FlightStatuses, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_SeatClassesFormat = new DefaultCometihadedhoctscalaxb_SeatClassesFormat {}
  trait DefaultCometihadedhoctscalaxb_SeatClassesFormat extends scalaxb.XMLFormat[SeatClasses] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): SeatClasses = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("A")) => A
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("B")) => B
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C")) => C
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("D")) => DValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("E")) => E
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("F")) => F
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("G")) => G
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("H")) => H
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("I")) => IValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("J")) => J
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("K")) => K
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("L")) => LValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("M")) => M
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("N")) => N
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("O")) => OValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("P")) => P
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Q")) => Q
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("R")) => R
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S")) => SValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("T")) => T
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("U")) => U
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("V")) => V
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("W")) => W
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("X")) => X
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Y")) => Y
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Z")) => Z

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SeatClasses] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: SeatClasses, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_ConnectionDirectionTypesFormat = new DefaultCometihadedhoctscalaxb_ConnectionDirectionTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_ConnectionDirectionTypesFormat extends scalaxb.XMLFormat[ConnectionDirectionTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ConnectionDirectionTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("IN")) => IN
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("OUT")) => OUT

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ConnectionDirectionTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ConnectionDirectionTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_InboundOrOutboundTypesFormat = new DefaultCometihadedhoctscalaxb_InboundOrOutboundTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_InboundOrOutboundTypesFormat extends scalaxb.XMLFormat[InboundOrOutboundTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): InboundOrOutboundTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("inbound")) => Inbound
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("outbound")) => Outbound

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, InboundOrOutboundTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: InboundOrOutboundTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_ArrivalDepartureTypesFormat = new DefaultCometihadedhoctscalaxb_ArrivalDepartureTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_ArrivalDepartureTypesFormat extends scalaxb.XMLFormat[ArrivalDepartureTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ArrivalDepartureTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ARRIVAL")) => ARRIVAL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DEPARTURE")) => DEPARTURE

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ArrivalDepartureTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ArrivalDepartureTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_DepartureOrArrivalTypesFormat = new DefaultCometihadedhoctscalaxb_DepartureOrArrivalTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_DepartureOrArrivalTypesFormat extends scalaxb.XMLFormat[DepartureOrArrivalTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DepartureOrArrivalTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("departure")) => DepartureValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("arrival")) => ArrivalValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DepartureOrArrivalTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DepartureOrArrivalTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_CargoWeightUnitsFormat = new DefaultCometihadedhoctscalaxb_CargoWeightUnitsFormat {}
  trait DefaultCometihadedhoctscalaxb_CargoWeightUnitsFormat extends scalaxb.XMLFormat[CargoWeightUnits] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CargoWeightUnits = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KG")) => KGValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LBS")) => LBSValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CargoWeightUnits] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CargoWeightUnits, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_CargoVolumeUnitsFormat = new DefaultCometihadedhoctscalaxb_CargoVolumeUnitsFormat {}
  trait DefaultCometihadedhoctscalaxb_CargoVolumeUnitsFormat extends scalaxb.XMLFormat[CargoVolumeUnits] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CargoVolumeUnits = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LTR")) => LTR
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("M3")) => M3

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CargoVolumeUnits] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CargoVolumeUnits, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_FuelOperationTypesFormat = new DefaultCometihadedhoctscalaxb_FuelOperationTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_FuelOperationTypesFormat extends scalaxb.XMLFormat[FuelOperationTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FuelOperationTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EC")) => EC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ET")) => ET
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("EX")) => EX
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SA")) => SA
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("SV")) => SV

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FuelOperationTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FuelOperationTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_FuelFunctionTypesFormat = new DefaultCometihadedhoctscalaxb_FuelFunctionTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_FuelFunctionTypesFormat extends scalaxb.XMLFormat[FuelFunctionTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FuelFunctionTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AL")) => AL
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BL")) => BL

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FuelFunctionTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FuelFunctionTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_FuelTotalizerTypesFormat = new DefaultCometihadedhoctscalaxb_FuelTotalizerTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_FuelTotalizerTypesFormat extends scalaxb.XMLFormat[FuelTotalizerTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FuelTotalizerTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("D")) => D
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("I")) => I
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("O")) => O

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FuelTotalizerTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FuelTotalizerTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_FuelSuppliedElementTypesFormat = new DefaultCometihadedhoctscalaxb_FuelSuppliedElementTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_FuelSuppliedElementTypesFormat extends scalaxb.XMLFormat[FuelSuppliedElementTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FuelSuppliedElementTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("1DI")) => Number1DI
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("1UR")) => Number1UR

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FuelSuppliedElementTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FuelSuppliedElementTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_FuelWeightUnitTypesFormat = new DefaultCometihadedhoctscalaxb_FuelWeightUnitTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_FuelWeightUnitTypesFormat extends scalaxb.XMLFormat[FuelWeightUnitTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FuelWeightUnitTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KG")) => KG
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LBS")) => LBS
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("L")) => LValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GAL")) => GAL

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FuelWeightUnitTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FuelWeightUnitTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_FlightTypesFormat = new DefaultCometihadedhoctscalaxb_FlightTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_FlightTypesFormat extends scalaxb.XMLFormat[FlightTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FlightTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S")) => S
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("L")) => L

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FlightTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FlightTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_DomesticOrInternationalTypesFormat = new DefaultCometihadedhoctscalaxb_DomesticOrInternationalTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_DomesticOrInternationalTypesFormat extends scalaxb.XMLFormat[DomesticOrInternationalTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): DomesticOrInternationalTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("international")) => International
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("domestic")) => Domestic

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, DomesticOrInternationalTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: DomesticOrInternationalTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_ForecastLoadFormat extends scalaxb.ElemNameParser[ForecastLoad] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ForecastLoad] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "loadCount")) ^^
      { case p1 =>
      oct.scalaxb.ForecastLoad(p1 map { scalaxb.fromXML[LoadCount](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: ForecastLoad, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.loadCount flatMap { scalaxb.toXML[LoadCount](_, Some("http://iflight.ibsplc.com/"), Some("loadCount"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_BookedLoadFormat extends scalaxb.ElemNameParser[BookedLoad] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BookedLoad] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "loadCount")) ^^
      { case p1 =>
      oct.scalaxb.BookedLoad(p1 map { scalaxb.fromXML[LoadCount](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: BookedLoad, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.loadCount flatMap { scalaxb.toXML[LoadCount](_, Some("http://iflight.ibsplc.com/"), Some("loadCount"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_CheckedLoadFormat extends scalaxb.ElemNameParser[CheckedLoad] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CheckedLoad] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "loadCount")) ^^
      { case p1 =>
      oct.scalaxb.CheckedLoad(p1 map { scalaxb.fromXML[LoadCount](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CheckedLoad, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.loadCount flatMap { scalaxb.toXML[LoadCount](_, Some("http://iflight.ibsplc.com/"), Some("loadCount"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_BoardedLoadFormat extends scalaxb.ElemNameParser[BoardedLoad] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[BoardedLoad] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "loadCount")) ^^
      { case p1 =>
      oct.scalaxb.BoardedLoad(p1 map { scalaxb.fromXML[LoadCount](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: BoardedLoad, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.loadCount flatMap { scalaxb.toXML[LoadCount](_, Some("http://iflight.ibsplc.com/"), Some("loadCount"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_PaxFormat extends scalaxb.ElemNameParser[Pax] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("Pax")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Pax] =
      phrase(opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "forecastLoad")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "bookedLoad")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "checkedLoad")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "boardedLoad")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "infantCount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      oct.scalaxb.Pax(p1.headOption map { scalaxb.fromXML[ForecastLoad](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BookedLoad](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CheckedLoad](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BoardedLoad](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Pax, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.forecastLoad map { scalaxb.toXML[ForecastLoad](_, Some("http://iflight.ibsplc.com/"), Some("forecastLoad"), __scope, false) } getOrElse {Nil},
        __obj.bookedLoad map { scalaxb.toXML[BookedLoad](_, Some("http://iflight.ibsplc.com/"), Some("bookedLoad"), __scope, false) } getOrElse {Nil},
        __obj.checkedLoad map { scalaxb.toXML[CheckedLoad](_, Some("http://iflight.ibsplc.com/"), Some("checkedLoad"), __scope, false) } getOrElse {Nil},
        __obj.boardedLoad map { scalaxb.toXML[BoardedLoad](_, Some("http://iflight.ibsplc.com/"), Some("boardedLoad"), __scope, false) } getOrElse {Nil},
        __obj.infantCount map { scalaxb.toXML[Int](_, Some("http://iflight.ibsplc.com/"), Some("infantCount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_LoadCountFormat extends scalaxb.XMLFormat[LoadCount] with scalaxb.CanWriteChildNodes[LoadCount] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, LoadCount] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.LoadCount(scalaxb.fromXML[Int](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@seatClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SeatClasses](x, scalaxb.ElemName(node) :: stack)) } map { "@seatClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: LoadCount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@seatClass", _) => attr = scala.xml.Attribute(null, "seatClass", __obj.seatClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: LoadCount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultCometihadedhoctscalaxb_ComplementFormat extends scalaxb.ElemNameParser[Complement] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Complement] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "rank")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "crewType")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "crewRequirement")) ^^
      { case p1 ~ p2 ~ p3 =>
      oct.scalaxb.Complement(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[CrewTypes](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: Complement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.rank, Some("http://iflight.ibsplc.com/"), Some("rank"), __scope, false),
        __obj.crewType map { scalaxb.toXML[CrewTypes](_, Some("http://iflight.ibsplc.com/"), Some("crewType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.crewRequirement, Some("http://iflight.ibsplc.com/"), Some("crewRequirement"), __scope, false))

  }

  trait DefaultCometihadedhoctscalaxb_RankComplementsFormat extends scalaxb.ElemNameParser[RankComplements] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[RankComplements] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "complement")) ^^
      { case p1 =>
      oct.scalaxb.RankComplements(p1 map { scalaxb.fromXML[Complement](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: RankComplements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.complement flatMap { scalaxb.toXML[Complement](_, Some("http://iflight.ibsplc.com/"), Some("complement"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_Complement2Format extends scalaxb.ElemNameParser[Complement2] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Complement2] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "qualificationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "rank")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "crewType")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "minCrewRequirement")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "maxCrewRequirement")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      oct.scalaxb.Complement2(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[CrewTypes](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: Complement2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.qualificationCode, Some("http://iflight.ibsplc.com/"), Some("qualificationCode"), __scope, false),
        __obj.rank map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("rank"), __scope, false) } getOrElse {Nil},
        __obj.crewType map { scalaxb.toXML[CrewTypes](_, Some("http://iflight.ibsplc.com/"), Some("crewType"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.minCrewRequirement, Some("http://iflight.ibsplc.com/"), Some("minCrewRequirement"), __scope, false),
        scalaxb.toXML[Int](__obj.maxCrewRequirement, Some("http://iflight.ibsplc.com/"), Some("maxCrewRequirement"), __scope, false))

  }

  trait DefaultCometihadedhoctscalaxb_QualificationComplementsFormat extends scalaxb.ElemNameParser[QualificationComplements] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[QualificationComplements] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "complement")) ^^
      { case p1 =>
      oct.scalaxb.QualificationComplements(p1 map { scalaxb.fromXML[Complement2](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: QualificationComplements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.complement flatMap { scalaxb.toXML[Complement2](_, Some("http://iflight.ibsplc.com/"), Some("complement"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_FlightLegComplementsFormat extends scalaxb.ElemNameParser[FlightLegComplements] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("FlightLegComplements")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FlightLegComplements] =
      phrase(opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "rankComplements")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "qualificationComplements")) ^^
      { case p1 ~ p2 =>
      oct.scalaxb.FlightLegComplements(p1.headOption map { scalaxb.fromXML[RankComplements](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[QualificationComplements](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: FlightLegComplements, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.rankComplements map { scalaxb.toXML[RankComplements](_, Some("http://iflight.ibsplc.com/"), Some("rankComplements"), __scope, false) } getOrElse {Nil},
        __obj.qualificationComplements map { scalaxb.toXML[QualificationComplements](_, Some("http://iflight.ibsplc.com/"), Some("qualificationComplements"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_BagCountFormat extends scalaxb.XMLFormat[BagCount] with scalaxb.CanWriteChildNodes[BagCount] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, BagCount] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.BagCount(scalaxb.fromXML[Int](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@seatClass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[SeatClasses](x, scalaxb.ElemName(node) :: stack)) } map { "@seatClass" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: BagCount, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@seatClass", _) => attr = scala.xml.Attribute(null, "seatClass", __obj.seatClass.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: BagCount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultCometihadedhoctscalaxb_BaggageFormat extends scalaxb.ElemNameParser[Baggage] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Baggage] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "bagCount")) ^^
      { case p1 =>
      oct.scalaxb.Baggage(p1 map { scalaxb.fromXML[BagCount](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@totalBagCount").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@totalBagCount" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Baggage, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@totalBagCount", _) => __obj.totalBagCount foreach { x => attr = scala.xml.Attribute(null, "totalBagCount", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Baggage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.bagCount flatMap { scalaxb.toXML[BagCount](_, Some("http://iflight.ibsplc.com/"), Some("bagCount"), __scope, false) })
  }

  trait DefaultCometihadedhoctscalaxb_ConnectionFlightFormat extends scalaxb.ElemNameParser[ConnectionFlight] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[ConnectionFlight] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightId")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "stationDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "pax")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "baggage")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      oct.scalaxb.ConnectionFlight(scalaxb.fromXML[FlightId](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Pax](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Baggage](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@connectionDirection").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ConnectionDirectionTypes](x, scalaxb.ElemName(node) :: stack)) } map { "@connectionDirection" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: ConnectionFlight, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@connectionDirection", _) => attr = scala.xml.Attribute(null, "connectionDirection", __obj.connectionDirection.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: ConnectionFlight, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[FlightId](__obj.flightId, Some("http://iflight.ibsplc.com/"), Some("flightId"), __scope, false),
        __obj.stationDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://iflight.ibsplc.com/"), Some("stationDateTime"), __scope, false) } getOrElse {Nil},
        __obj.pax map { scalaxb.toXML[Pax](_, Some("http://iflight.ibsplc.com/"), Some("pax"), __scope, false) } getOrElse {Nil},
        __obj.baggage map { scalaxb.toXML[Baggage](_, Some("http://iflight.ibsplc.com/"), Some("baggage"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_ConnectionsFormat extends scalaxb.ElemNameParser[Connections] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Connections] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "connectionFlight")) ^^
      { case p1 =>
      oct.scalaxb.Connections(p1 map { scalaxb.fromXML[ConnectionFlight](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Connections, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.connectionFlight flatMap { scalaxb.toXML[ConnectionFlight](_, Some("http://iflight.ibsplc.com/"), Some("connectionFlight"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_FlightPaxFormat extends scalaxb.ElemNameParser[FlightPax] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FlightPax] =
      phrase((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "flightId")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "pax")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "connections")) ^^
      { case p1 ~ p2 ~ p3 =>
      oct.scalaxb.FlightPax(scalaxb.fromXML[FlightId](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Pax](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Connections](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@actionType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[ActionTypes](x, scalaxb.ElemName(node) :: stack)) } map { "@actionType" -> _ },
        (node \ "@messageReference").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@messageReference" -> _ },
        (node \ "@batchReference").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@batchReference" -> _ },
        (node \ "@sequenceNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@sequenceNumber" -> _ },
        (node \ "@batchEndInd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@batchEndInd" -> _ },
        (node \ "@timestamp").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@timestamp" -> _ },
        (node \ "@originator").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@originator" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[String](scala.xml.Text("(c) 2018 IBS Software Private Limited"), scalaxb.ElemName(node) :: stack))) map { "@proprietaryNotice" -> _ },
        (node \ "@company").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@company" -> _ },
        (node \ "@tenant").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tenant" -> _ },
        Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Float](scala.xml.Text("2.0"), scalaxb.ElemName(node) :: stack))) map { "@schemaVersion" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: FlightPax, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@actionType", _) => __obj.actionType foreach { x => attr = scala.xml.Attribute(null, "actionType", x.toString, attr) }
        case ("@messageReference", _) => __obj.messageReference foreach { x => attr = scala.xml.Attribute(null, "messageReference", x.toString, attr) }
        case ("@batchReference", _) => __obj.batchReference foreach { x => attr = scala.xml.Attribute(null, "batchReference", x.toString, attr) }
        case ("@sequenceNumber", _) => __obj.sequenceNumber foreach { x => attr = scala.xml.Attribute(null, "sequenceNumber", x.toString, attr) }
        case ("@batchEndInd", _) => __obj.batchEndInd foreach { x => attr = scala.xml.Attribute(null, "batchEndInd", x.toString, attr) }
        case ("@timestamp", _) => attr = scala.xml.Attribute(null, "timestamp", __obj.timestamp.toString, attr)
        case ("@originator", _) => __obj.originator foreach { x => attr = scala.xml.Attribute(null, "originator", x.toString, attr) }
        case ("@proprietaryNotice", _) => attr = scala.xml.Attribute(null, "proprietaryNotice", __obj.proprietaryNotice.toString, attr)
        case ("@company", _) => __obj.company foreach { x => attr = scala.xml.Attribute(null, "company", x.toString, attr) }
        case ("@tenant", _) => __obj.tenant foreach { x => attr = scala.xml.Attribute(null, "tenant", x.toString, attr) }
        case ("@schemaVersion", _) => attr = scala.xml.Attribute(null, "schemaVersion", __obj.schemaVersion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: FlightPax, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[FlightId](__obj.flightId, Some("http://iflight.ibsplc.com/"), Some("flightId"), __scope, false),
        __obj.pax map { scalaxb.toXML[Pax](_, Some("http://iflight.ibsplc.com/"), Some("pax"), __scope, false) } getOrElse {Nil},
        __obj.connections map { scalaxb.toXML[Connections](_, Some("http://iflight.ibsplc.com/"), Some("connections"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_GeneralTypesFormat extends scalaxb.XMLFormat[GeneralTypes] with scalaxb.CanWriteChildNodes[GeneralTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, GeneralTypes] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.GeneralTypes(scala.collection.immutable.ListMap(List(
        (node \ "@schemaVersion").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Float](scala.xml.Text("2.0"), scalaxb.ElemName(node) :: stack))) map { "@schemaVersion" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: GeneralTypes, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@schemaVersion", _) => if (__obj.schemaVersion.toString != "2.0") attr = scala.xml.Attribute(null, "schemaVersion", __obj.schemaVersion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: GeneralTypes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultCometihadedhoctscalaxb_SpecialDutyCodesFormat extends scalaxb.ElemNameParser[SpecialDutyCodes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("SpecialDutyCodes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[SpecialDutyCodes] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "specialDutyCode")) ^^
      { case p1 =>
      oct.scalaxb.SpecialDutyCodes(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: SpecialDutyCodes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.specialDutyCode flatMap { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("specialDutyCode"), __scope, false) })
  }

  def buildCometihadedhoctscalaxb_CrewTypesFormat = new DefaultCometihadedhoctscalaxb_CrewTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_CrewTypesFormat extends scalaxb.XMLFormat[CrewTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): CrewTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("F")) => FValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("C")) => CValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, CrewTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: CrewTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_WeightTypeFormat extends scalaxb.XMLFormat[WeightType] with scalaxb.CanWriteChildNodes[WeightType] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, WeightType] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.WeightType(scalaxb.fromXML[Int](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@unit").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[WeightUnitTypes](x, scalaxb.ElemName(node) :: stack)) } map { "@unit" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: WeightType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@unit", _) => attr = scala.xml.Attribute(null, "unit", __obj.unit.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: WeightType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  def buildCometihadedhoctscalaxb_UnitOfMeasuresFormat = new DefaultCometihadedhoctscalaxb_UnitOfMeasuresFormat {}
  trait DefaultCometihadedhoctscalaxb_UnitOfMeasuresFormat extends scalaxb.XMLFormat[UnitOfMeasures] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): UnitOfMeasures = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KILO")) => KILO
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("POUNDS")) => POUNDS

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, UnitOfMeasures] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: UnitOfMeasures, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_WeightUnitTypesFormat = new DefaultCometihadedhoctscalaxb_WeightUnitTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_WeightUnitTypesFormat extends scalaxb.XMLFormat[WeightUnitTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): WeightUnitTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("KG")) => KGValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LBS")) => LBSValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, WeightUnitTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: WeightUnitTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_LengthTypeFormat extends scalaxb.XMLFormat[LengthType] with scalaxb.CanWriteChildNodes[LengthType] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, LengthType] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.LengthType(scalaxb.fromXML[Int](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@unit").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@unit" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: LengthType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@unit", _) => attr = scala.xml.Attribute(null, "unit", __obj.unit.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: LengthType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  trait DefaultCometihadedhoctscalaxb_VolumeTypeFormat extends scalaxb.XMLFormat[VolumeType] with scalaxb.CanWriteChildNodes[VolumeType] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, VolumeType] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.VolumeType(scalaxb.fromXML[Int](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@unit").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@unit" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: VolumeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@unit", _) => attr = scala.xml.Attribute(null, "unit", __obj.unit.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: VolumeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  def buildCometihadedhoctscalaxb_VolumeUnitTypesFormat = new DefaultCometihadedhoctscalaxb_VolumeUnitTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_VolumeUnitTypesFormat extends scalaxb.XMLFormat[VolumeUnitTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): VolumeUnitTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("M^3")) => Mu943
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("L")) => LValue3
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GAL")) => GALValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, VolumeUnitTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: VolumeUnitTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_FleetFormat extends scalaxb.XMLFormat[Fleet] with scalaxb.CanWriteChildNodes[Fleet] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, Fleet] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.Fleet(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@fleetType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[FleetTypes](x, scalaxb.ElemName(node) :: stack)) } map { "@fleetType" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: Fleet, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@fleetType", _) => __obj.fleetType foreach { x => attr = scala.xml.Attribute(null, "fleetType", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Fleet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))

  }

  def buildCometihadedhoctscalaxb_FleetTypesFormat = new DefaultCometihadedhoctscalaxb_FleetTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_FleetTypesFormat extends scalaxb.XMLFormat[FleetTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): FleetTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("AGREEMENT")) => AGREEMENT
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("BASE")) => BASE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LICENSE")) => LICENSE

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FleetTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: FleetTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_DaysOfWeekFormat extends scalaxb.ElemNameParser[DaysOfWeek] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("DaysOfWeek")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DaysOfWeek] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "dayOfWeek")) ^^
      { case p1 =>
      oct.scalaxb.DaysOfWeek(p1 map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: DaysOfWeek, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dayOfWeek flatMap { scalaxb.toXML[Int](_, Some("http://iflight.ibsplc.com/"), Some("dayOfWeek"), __scope, false) })
  }

  def buildCometihadedhoctscalaxb_PeriodTypesFormat = new DefaultCometihadedhoctscalaxb_PeriodTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_PeriodTypesFormat extends scalaxb.XMLFormat[PeriodTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): PeriodTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("D")) => DValue2
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("W")) => WValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("M")) => MValue
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("Y")) => YValue

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, PeriodTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: PeriodTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  def buildCometihadedhoctscalaxb_TimeModeTypesFormat = new DefaultCometihadedhoctscalaxb_TimeModeTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_TimeModeTypesFormat extends scalaxb.XMLFormat[TimeModeTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): TimeModeTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UTC")) => UTC
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("LT")) => LT

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, TimeModeTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: TimeModeTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_SubParameterFormat extends scalaxb.XMLFormat[SubParameter] with scalaxb.CanWriteChildNodes[SubParameter] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, SubParameter] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.SubParameter(scala.collection.immutable.ListMap(List(
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: SubParameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.key.toString, attr)
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: SubParameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  trait DefaultCometihadedhoctscalaxb_ParameterFormat extends scalaxb.ElemNameParser[Parameter] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Parameter] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "subParameter")) ^^
      { case p1 =>
      oct.scalaxb.Parameter(p1 map { scalaxb.fromXML[SubParameter](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: Parameter, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.key.toString, attr)
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: Parameter, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.subParameter flatMap { scalaxb.toXML[SubParameter](_, Some("http://iflight.ibsplc.com/"), Some("subParameter"), __scope, false) })
  }

  trait DefaultCometihadedhoctscalaxb_ParametersFormat extends scalaxb.ElemNameParser[Parameters] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("Parameters")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Parameters] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "parameter")) ^^
      { case p1 =>
      oct.scalaxb.Parameters(p1 map { scalaxb.fromXML[Parameter](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Parameters, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.parameter flatMap { scalaxb.toXML[Parameter](_, Some("http://iflight.ibsplc.com/"), Some("parameter"), __scope, false) })
  }

  trait DefaultCometihadedhoctscalaxb_DurationOrPercentageFormat extends scalaxb.ElemNameParser[DurationOrPercentage] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("DurationOrPercentage")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[DurationOrPercentage] =
      phrase((((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "durationValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.Duration](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "percentageValue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      oct.scalaxb.DurationOrPercentage(p1) })
    
    def writesChildNodes(__obj: DurationOrPercentage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.durationorpercentageoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)
  }

  def buildCometihadedhoctscalaxb_HaulTypesFormat = new DefaultCometihadedhoctscalaxb_HaulTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_HaulTypesFormat extends scalaxb.XMLFormat[HaulTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): HaulTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("L")) => LValue4
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("S")) => SValue2

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, HaulTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: HaulTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_CrewApplicabilityFormat extends scalaxb.ElemNameParser[CrewApplicability] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("CrewApplicability")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CrewApplicability] =
      phrase(opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "crewType")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "base")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fleet")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "rank")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      oct.scalaxb.CrewApplicability(p1.headOption map { scalaxb.fromXML[CrewTypes](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CrewApplicability, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.crewType map { scalaxb.toXML[CrewTypes](_, Some("http://iflight.ibsplc.com/"), Some("crewType"), __scope, false) } getOrElse {Nil},
        __obj.base map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("base"), __scope, false) } getOrElse {Nil},
        __obj.fleet map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("fleet"), __scope, false) } getOrElse {Nil},
        __obj.rank map { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("rank"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultCometihadedhoctscalaxb_FleetsFormat extends scalaxb.ElemNameParser[Fleets] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Fleets] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fleet")) ^^
      { case p1 =>
      oct.scalaxb.Fleets(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Fleets, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.fleet flatMap { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("fleet"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_RanksFormat extends scalaxb.ElemNameParser[Ranks] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Ranks] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "rank")) ^^
      { case p1 =>
      oct.scalaxb.Ranks(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Ranks, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.rank flatMap { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("rank"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_BasesFormat extends scalaxb.ElemNameParser[Bases] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Bases] =
      phrase(safeRep(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "base")) ^^
      { case p1 =>
      oct.scalaxb.Bases(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: Bases, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.base flatMap { scalaxb.toXML[String](_, Some("http://iflight.ibsplc.com/"), Some("base"), __scope, false) })
  }
  trait DefaultCometihadedhoctscalaxb_CrewApplicabilityMultiFormat extends scalaxb.ElemNameParser[CrewApplicabilityMulti] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    override def typeName: Option[String] = Some("CrewApplicabilityMulti")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[CrewApplicabilityMulti] =
      phrase(opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "crewType")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fleets")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "ranks")) ~ 
      opt(scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "bases")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      oct.scalaxb.CrewApplicabilityMulti(p1.headOption map { scalaxb.fromXML[CrewTypes](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Fleets](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Ranks](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Bases](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: CrewApplicabilityMulti, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.crewType map { scalaxb.toXML[CrewTypes](_, Some("http://iflight.ibsplc.com/"), Some("crewType"), __scope, false) } getOrElse {Nil},
        __obj.fleets map { scalaxb.toXML[Fleets](_, Some("http://iflight.ibsplc.com/"), Some("fleets"), __scope, false) } getOrElse {Nil},
        __obj.ranks map { scalaxb.toXML[Ranks](_, Some("http://iflight.ibsplc.com/"), Some("ranks"), __scope, false) } getOrElse {Nil},
        __obj.bases map { scalaxb.toXML[Bases](_, Some("http://iflight.ibsplc.com/"), Some("bases"), __scope, false) } getOrElse {Nil})

  }


/** From and to time group
*/
  trait Cometihadedhoctscalaxb_FromToTimeGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseFromToTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FromToTimeGroupSequence] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toTime"))) ^^ 
        { case p1 ~ p2 => oct.scalaxb.FromToTimeGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseFromToTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toTime"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(oct.scalaxb.FromToTimeGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedFromToTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromTime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toTime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultCometihadedhoctscalaxb_FromToTimeGroupSequenceFormat extends scalaxb.XMLFormat[FromToTimeGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FromToTimeGroupSequence] = Left("don't call me.")
    
    def writes(__obj: FromToTimeGroupSequence, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.fromTime, Some("http://iflight.ibsplc.com/"), Some("fromTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.toTime, Some("http://iflight.ibsplc.com/"), Some("toTime"), __scope, false))


  }


/** From and to date time group
*/
  trait Cometihadedhoctscalaxb_FromToDateTimeGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseFromToDateTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FromToDateTimeGroupSequence] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromDateTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toDateTime"))) ^^ 
        { case p1 ~ p2 => oct.scalaxb.FromToDateTimeGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseFromToDateTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromDateTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toDateTime"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(oct.scalaxb.FromToDateTimeGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedFromToDateTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromDateTime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toDateTime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultCometihadedhoctscalaxb_FromToDateTimeGroupSequenceFormat extends scalaxb.XMLFormat[FromToDateTimeGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FromToDateTimeGroupSequence] = Left("don't call me.")
    
    def writes(__obj: FromToDateTimeGroupSequence, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.fromDateTime, Some("http://iflight.ibsplc.com/"), Some("fromDateTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.toDateTime, Some("http://iflight.ibsplc.com/"), Some("toDateTime"), __scope, false))


  }


/** Start and end date time group
*/
  trait Cometihadedhoctscalaxb_StartEndDateTimeGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseStartEndDateTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[StartEndDateTimeGroupSequence] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "startDateTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "endDateTime"))) ^^ 
        { case p1 ~ p2 => oct.scalaxb.StartEndDateTimeGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseStartEndDateTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "startDateTime")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "endDateTime"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(oct.scalaxb.StartEndDateTimeGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedStartEndDateTimeGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "startDateTime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "endDateTime")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultCometihadedhoctscalaxb_StartEndDateTimeGroupSequenceFormat extends scalaxb.XMLFormat[StartEndDateTimeGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, StartEndDateTimeGroupSequence] = Left("don't call me.")
    
    def writes(__obj: StartEndDateTimeGroupSequence, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.startDateTime, Some("http://iflight.ibsplc.com/"), Some("startDateTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.endDateTime, Some("http://iflight.ibsplc.com/"), Some("endDateTime"), __scope, false))


  }


/** From and to date group
*/
  trait Cometihadedhoctscalaxb_FromToDateGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseFromToDateGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[FromToDateGroupSequence] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromDate")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toDate"))) ^^ 
        { case p1 ~ p2 => oct.scalaxb.FromToDateGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
  
    def parseFromToDateGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromDate")) ~ 
      (scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toDate"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(oct.scalaxb.FromToDateGroupSequence(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedFromToDateGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "fromDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://iflight.ibsplc.com/"), "toDate")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList) })
  }

  trait DefaultCometihadedhoctscalaxb_FromToDateGroupSequenceFormat extends scalaxb.XMLFormat[FromToDateGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, FromToDateGroupSequence] = Left("don't call me.")
    
    def writes(__obj: FromToDateGroupSequence, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.fromDate, Some("http://iflight.ibsplc.com/"), Some("fromDate"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.toDate, Some("http://iflight.ibsplc.com/"), Some("toDate"), __scope, false))


  }

  trait DefaultCometihadedhoctscalaxb_MetaDataFormat extends scalaxb.XMLFormat[MetaData] with scalaxb.CanWriteChildNodes[MetaData] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MetaData] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.MetaData(scala.collection.immutable.ListMap(List(
        (node \ "@schemaVersion").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[Float](scala.xml.Text("2.0"), scalaxb.ElemName(node) :: stack))) map { "@schemaVersion" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@schemaVersion", _) => if (__obj.schemaVersion.toString != "2.0") attr = scala.xml.Attribute(null, "schemaVersion", __obj.schemaVersion.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: MetaData, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil

  }

  def buildCometihadedhoctscalaxb_ActionTypesFormat = new DefaultCometihadedhoctscalaxb_ActionTypesFormat {}
  trait DefaultCometihadedhoctscalaxb_ActionTypesFormat extends scalaxb.XMLFormat[ActionTypes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def fromString(value: String, scope: scala.xml.NamespaceBinding): ActionTypes = scalaxb.fromXML[String](scala.xml.Text(value)) match {
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("ACKNOWLEDGE")) => ACKNOWLEDGE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("CREATE")) => CREATE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("DELETE")) => DELETE
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("END")) => END
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("GET")) => GET
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("START")) => START
      case x: String if x == scalaxb.fromXML[String](scala.xml.Text("UPDATE")) => UPDATE

    }

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, ActionTypes] = seq match {
      case elem: scala.xml.Elem => Right(fromString(elem.text, elem.scope))
      case _ => Right(fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: ActionTypes, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }
  trait DefaultCometihadedhoctscalaxb_MessageAttributesFormat extends scalaxb.AttributeGroupFormat[MessageAttributes] {
    val targetNamespace: Option[String] = Some("http://iflight.ibsplc.com/")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, MessageAttributes] = seq match {
      case node: scala.xml.Node => Right(oct.scalaxb.MessageAttributes((node \ "@actionType").headOption map { scalaxb.fromXML[ActionTypes](_, scalaxb.ElemName(node) :: stack) },
      (node \ "@messageReference").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
      (node \ "@batchReference").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
      (node \ "@sequenceNumber").headOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
      (node \ "@batchEndInd").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
      scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar]((node \ "@timestamp"), scalaxb.ElemName(node) :: stack),
      (node \ "@originator").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
      scalaxb.fromXML[String](scala.xml.Text("(c) 2018 IBS Software Private Limited"), scalaxb.ElemName(node) :: stack),
      (node \ "@company").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
      (node \ "@tenant").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def toAttribute(__obj: MessageAttributes, __attr: scala.xml.MetaData, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = __attr
      __obj.actionType foreach { x => attr = scala.xml.Attribute(null, "actionType", x.toString, attr) }
    __obj.messageReference foreach { x => attr = scala.xml.Attribute(null, "messageReference", x.toString, attr) }
    __obj.batchReference foreach { x => attr = scala.xml.Attribute(null, "batchReference", x.toString, attr) }
    __obj.sequenceNumber foreach { x => attr = scala.xml.Attribute(null, "sequenceNumber", x.toString, attr) }
    __obj.batchEndInd foreach { x => attr = scala.xml.Attribute(null, "batchEndInd", x.toString, attr) }
    attr = scala.xml.Attribute(null, "timestamp", __obj.timestamp.toString, attr)
    __obj.originator foreach { x => attr = scala.xml.Attribute(null, "originator", x.toString, attr) }
    attr = scala.xml.Attribute(null, "proprietaryNotice", __obj.proprietaryNotice.toString, attr)
    __obj.company foreach { x => attr = scala.xml.Attribute(null, "company", x.toString, attr) }
    __obj.tenant foreach { x => attr = scala.xml.Attribute(null, "tenant", x.toString, attr) }
      attr
    }
  }


}

