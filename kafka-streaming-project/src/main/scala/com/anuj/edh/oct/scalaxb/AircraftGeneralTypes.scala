// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.anuj.edh.oct.scalaxb

/**
			Copyright 2018 IBS Software Private Limited. All Rights Reserved.
			This document is the proprietary information of IBS Software Private Limited. Use is subject to license terms.	
		
*/


case class AircraftGeneralTypes(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val schemaVersion = attributes("@schemaVersion").as[Float]
}

      

sealed trait AircraftActionTypes

object AircraftActionTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[AircraftActionTypes]): AircraftActionTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AircraftActionTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[AircraftActionTypes] = Seq(CANCEL, ENDValue, STARTValue)
}

case object CANCEL extends AircraftActionTypes { override def toString = "CANCEL" }
case object ENDValue extends AircraftActionTypes { override def toString = "END" }
case object STARTValue extends AircraftActionTypes { override def toString = "START" }

sealed trait AircraftAssignmentTypes

object AircraftAssignmentTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[AircraftAssignmentTypes]): AircraftAssignmentTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AircraftAssignmentTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[AircraftAssignmentTypes] = Seq(AIRCRAFT, ROTATION, UNASSIGNED)
}

case object AIRCRAFT extends AircraftAssignmentTypes { override def toString = "AIRCRAFT" }
case object ROTATION extends AircraftAssignmentTypes { override def toString = "ROTATION" }
case object UNASSIGNED extends AircraftAssignmentTypes { override def toString = "UNASSIGNED" }

