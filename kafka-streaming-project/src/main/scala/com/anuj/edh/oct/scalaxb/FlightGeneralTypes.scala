// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.anuj.edh.oct.scalaxb

/**
			Copyright 2018 IBS Software Private Limited. All Rights Reserved.
			This document is the proprietary information of IBS Software Private Limited. Use is subject to license terms.	
		
*/


case class FlightGeneralTypes(attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val schemaVersion = attributes("@schemaVersion").as[Float]
}

      


/** Flight
*/
case class Flight(flightId: FlightId,
  flightInfo: Option[FlightInfo] = None)
      


/** Flight ID
*/
case class FlightId(flightDate: javax.xml.datatype.XMLGregorianCalendar,
  carrierCode: String,
  flightNumber: String,
  flightSuffix: Option[String] = None,
  departureAirport: String,
  arrivalAirport: Option[String] = None,
  departureNumber: Option[Int] = None,
  legNumber: Option[Int] = None)
      


/** Flight ID for multi leg request
*/
case class MultiLegReqFlightId(flightDate: javax.xml.datatype.XMLGregorianCalendar,
  carrierCode: String,
  flightNumber: String,
  flightSuffix: Option[String] = None,
  departureAirport: Option[String] = None,
  arrivalAirport: Option[String] = None,
  departureNumber: Option[Int] = None,
  legNumber: Option[Int] = None)
      


/** Flight ID ATC
*/
case class FlightIdAtc(flightDateAtc: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  carrierCodeAtc: String,
  flightNumberAtc: String)
      


/** Code Share Flight ID
*/
case class CodeShareFlightId(flightDate: javax.xml.datatype.XMLGregorianCalendar,
  carrierCode: String,
  flightNumber: String,
  flightSuffix: Option[String] = None)
      


case class AircraftInfo(aircraftSubType: Option[String] = None,
  aircraftVersion: Option[String] = None,
  aircraftRegistration: Option[String] = None)
      


/** Flight information
*/
case class FlightInfo(plannedDepartureDateTime: javax.xml.datatype.XMLGregorianCalendar,
  plannedArrivalDateTime: javax.xml.datatype.XMLGregorianCalendar,
  estimatedDepartureDateTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  estimatedArrivalDateTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  actualDepartureDateTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  actualArrivalDateTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  workType: String,
  serviceType: Option[String] = None,
  departureCountry: Option[String] = None,
  arrivalCountry: Option[String] = None,
  haulType: Option[HaulTypes] = None,
  fixedLinkInd: Option[Boolean] = None,
  cloakedInd: Option[Boolean] = None,
  aircraftInfo: Option[AircraftInfo] = None)
      

sealed trait FlightStatuses

object FlightStatuses {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[FlightStatuses]): FlightStatuses = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FlightStatuses) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FlightStatuses] = Seq(PDEP, OFBL, ENRT, LAND, ARVD)
}

case object PDEP extends FlightStatuses { override def toString = "PDEP" }
case object OFBL extends FlightStatuses { override def toString = "OFBL" }
case object ENRT extends FlightStatuses { override def toString = "ENRT" }
case object LAND extends FlightStatuses { override def toString = "LAND" }
case object ARVD extends FlightStatuses { override def toString = "ARVD" }

sealed trait SeatClasses

object SeatClasses {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[SeatClasses]): SeatClasses = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: SeatClasses) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[SeatClasses] = Seq(A, B, C, DValue, E, F, G, H, IValue, J, K, LValue2, M, N, OValue, P, Q, R, SValue, T, U, V, W, X, Y, Z)
}

case object A extends SeatClasses { override def toString = "A" }
case object B extends SeatClasses { override def toString = "B" }
case object C extends SeatClasses { override def toString = "C" }
case object DValue extends SeatClasses { override def toString = "D" }
case object E extends SeatClasses { override def toString = "E" }
case object F extends SeatClasses { override def toString = "F" }
case object G extends SeatClasses { override def toString = "G" }
case object H extends SeatClasses { override def toString = "H" }
case object IValue extends SeatClasses { override def toString = "I" }
case object J extends SeatClasses { override def toString = "J" }
case object K extends SeatClasses { override def toString = "K" }
case object LValue2 extends SeatClasses { override def toString = "L" }
case object M extends SeatClasses { override def toString = "M" }
case object N extends SeatClasses { override def toString = "N" }
case object OValue extends SeatClasses { override def toString = "O" }
case object P extends SeatClasses { override def toString = "P" }
case object Q extends SeatClasses { override def toString = "Q" }
case object R extends SeatClasses { override def toString = "R" }
case object SValue extends SeatClasses { override def toString = "S" }
case object T extends SeatClasses { override def toString = "T" }
case object U extends SeatClasses { override def toString = "U" }
case object V extends SeatClasses { override def toString = "V" }
case object W extends SeatClasses { override def toString = "W" }
case object X extends SeatClasses { override def toString = "X" }
case object Y extends SeatClasses { override def toString = "Y" }
case object Z extends SeatClasses { override def toString = "Z" }

sealed trait ConnectionDirectionTypes

object ConnectionDirectionTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[ConnectionDirectionTypes]): ConnectionDirectionTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: ConnectionDirectionTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[ConnectionDirectionTypes] = Seq(IN, OUT)
}

case object IN extends ConnectionDirectionTypes { override def toString = "IN" }
case object OUT extends ConnectionDirectionTypes { override def toString = "OUT" }

sealed trait InboundOrOutboundTypes

object InboundOrOutboundTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[InboundOrOutboundTypes]): InboundOrOutboundTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: InboundOrOutboundTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[InboundOrOutboundTypes] = Seq(Inbound, Outbound)
}

case object Inbound extends InboundOrOutboundTypes { override def toString = "inbound" }
case object Outbound extends InboundOrOutboundTypes { override def toString = "outbound" }

sealed trait ArrivalDepartureTypes

object ArrivalDepartureTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[ArrivalDepartureTypes]): ArrivalDepartureTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: ArrivalDepartureTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[ArrivalDepartureTypes] = Seq(ARRIVAL, DEPARTURE)
}

case object ARRIVAL extends ArrivalDepartureTypes { override def toString = "ARRIVAL" }
case object DEPARTURE extends ArrivalDepartureTypes { override def toString = "DEPARTURE" }

sealed trait DepartureOrArrivalTypes

object DepartureOrArrivalTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[DepartureOrArrivalTypes]): DepartureOrArrivalTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DepartureOrArrivalTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DepartureOrArrivalTypes] = Seq(DepartureValue, ArrivalValue)
}

case object DepartureValue extends DepartureOrArrivalTypes { override def toString = "departure" }
case object ArrivalValue extends DepartureOrArrivalTypes { override def toString = "arrival" }

sealed trait CargoWeightUnits

object CargoWeightUnits {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[CargoWeightUnits]): CargoWeightUnits = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: CargoWeightUnits) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[CargoWeightUnits] = Seq(KGValue, LBSValue)
}

case object KGValue extends CargoWeightUnits { override def toString = "KG" }
case object LBSValue extends CargoWeightUnits { override def toString = "LBS" }

sealed trait CargoVolumeUnits

object CargoVolumeUnits {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[CargoVolumeUnits]): CargoVolumeUnits = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: CargoVolumeUnits) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[CargoVolumeUnits] = Seq(LTR, M3)
}

case object LTR extends CargoVolumeUnits { override def toString = "LTR" }
case object M3 extends CargoVolumeUnits { override def toString = "M3" }

sealed trait FuelOperationTypes

object FuelOperationTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[FuelOperationTypes]): FuelOperationTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FuelOperationTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FuelOperationTypes] = Seq(EC, ET, EX, SA, SV)
}

case object EC extends FuelOperationTypes { override def toString = "EC" }
case object ET extends FuelOperationTypes { override def toString = "ET" }
case object EX extends FuelOperationTypes { override def toString = "EX" }
case object SA extends FuelOperationTypes { override def toString = "SA" }
case object SV extends FuelOperationTypes { override def toString = "SV" }

sealed trait FuelFunctionTypes

object FuelFunctionTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[FuelFunctionTypes]): FuelFunctionTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FuelFunctionTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FuelFunctionTypes] = Seq(AL, BL)
}

case object AL extends FuelFunctionTypes { override def toString = "AL" }
case object BL extends FuelFunctionTypes { override def toString = "BL" }

sealed trait FuelTotalizerTypes

object FuelTotalizerTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[FuelTotalizerTypes]): FuelTotalizerTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FuelTotalizerTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FuelTotalizerTypes] = Seq(D, I, O)
}

case object D extends FuelTotalizerTypes { override def toString = "D" }
case object I extends FuelTotalizerTypes { override def toString = "I" }
case object O extends FuelTotalizerTypes { override def toString = "O" }

sealed trait FuelSuppliedElementTypes

object FuelSuppliedElementTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[FuelSuppliedElementTypes]): FuelSuppliedElementTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FuelSuppliedElementTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FuelSuppliedElementTypes] = Seq(Number1DI, Number1UR)
}

case object Number1DI extends FuelSuppliedElementTypes { override def toString = "1DI" }
case object Number1UR extends FuelSuppliedElementTypes { override def toString = "1UR" }

sealed trait FuelWeightUnitTypes

object FuelWeightUnitTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[FuelWeightUnitTypes]): FuelWeightUnitTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FuelWeightUnitTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FuelWeightUnitTypes] = Seq(KG, LBS, LValue, GAL)
}

case object KG extends FuelWeightUnitTypes { override def toString = "KG" }
case object LBS extends FuelWeightUnitTypes { override def toString = "LBS" }
case object LValue extends FuelWeightUnitTypes { override def toString = "L" }
case object GAL extends FuelWeightUnitTypes { override def toString = "GAL" }

sealed trait FlightTypes

object FlightTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[FlightTypes]): FlightTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FlightTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FlightTypes] = Seq(S, L)
}

case object S extends FlightTypes { override def toString = "S" }
case object L extends FlightTypes { override def toString = "L" }

sealed trait DomesticOrInternationalTypes

object DomesticOrInternationalTypes {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: scalaxb.XMLFormat[DomesticOrInternationalTypes]): DomesticOrInternationalTypes = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DomesticOrInternationalTypes) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DomesticOrInternationalTypes] = Seq(International, Domestic)
}

case object International extends DomesticOrInternationalTypes { override def toString = "international" }
case object Domestic extends DomesticOrInternationalTypes { override def toString = "domestic" }


case class ForecastLoad(loadCount: Seq[LoadCount] = Nil)
      


case class BookedLoad(loadCount: Seq[LoadCount] = Nil)
      


case class CheckedLoad(loadCount: Seq[LoadCount] = Nil)
      


case class BoardedLoad(loadCount: Seq[LoadCount] = Nil)
      


/** Passenger information
*/
case class Pax(forecastLoad: Option[ForecastLoad] = None,
  bookedLoad: Option[BookedLoad] = None,
  checkedLoad: Option[CheckedLoad] = None,
  boardedLoad: Option[BoardedLoad] = None,
  infantCount: Option[Int] = None)
      


/** Load count
*/
case class LoadCount(value: Int,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val seatClass = attributes("@seatClass").as[SeatClasses]
}

      


case class Complement(rank: String,
  crewType: Option[CrewTypes] = None,
  crewRequirement: Int)
      


case class RankComplements(complement: Seq[Complement] = Nil)
      


case class Complement2(qualificationCode: String,
  rank: Option[String] = None,
  crewType: Option[CrewTypes] = None,
  minCrewRequirement: Int,
  maxCrewRequirement: Int)
      


case class QualificationComplements(complement: Seq[Complement2] = Nil)
      


case class FlightLegComplements(rankComplements: Option[RankComplements] = None,
  qualificationComplements: Option[QualificationComplements] = None)
      

